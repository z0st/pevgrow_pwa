import { DocumentNode, DefinitionNode, OperationDefinitionNode } from 'graphql';
/**
 * Gets the first graphql definition node from the given document
 * @param doc A graphql document node
 */
export declare const getDefinitionNode: (doc: DocumentNode) => DefinitionNode;
/**
 * Maps over the definitions in a Graphql document object and returns
 * an array of documents with only a single definition
 * @param gqlDocument The parsed Graphql document to be split
 */
export declare const splitDocument: (gqlDocument: DocumentNode) => DocumentNode[];
export declare type OperationType = OperationDefinitionNode['operation'];
export declare type OperationFilter = (definitionNode: DefinitionNode) => boolean;
export declare const operations: OperationType[];
export declare const isOperationType: (type: import("graphql").OperationTypeNode) => OperationFilter;
export declare const isQuery: OperationFilter;
export declare const isMutation: OperationFilter;
export declare const isSubscription: OperationFilter;
export declare const getOperationsOfType: (type: import("graphql").OperationTypeNode) => (gqlDocuments: DocumentNode[]) => DocumentNode[];
export declare const getQueries: (gqlDocuments: DocumentNode[]) => DocumentNode[];
export declare const getMutations: (gqlDocuments: DocumentNode[]) => DocumentNode[];
export declare const getSubscriptions: (gqlDocuments: DocumentNode[]) => DocumentNode[];
export declare const getOperationName: (operation: DocumentNode) => string;
export declare const isOperation: (node: DocumentNode) => boolean;
export declare const isAnonymousOperation: (node: DocumentNode) => boolean;
export declare const isNamedOperation: (node: DocumentNode) => boolean;
export declare const hasAnonymousOperation: (nodes: DocumentNode[]) => boolean;
export declare const hasNamedOperation: (nodes: DocumentNode[]) => boolean;
