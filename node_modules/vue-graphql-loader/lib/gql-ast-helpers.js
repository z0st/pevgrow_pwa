"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Gets the first graphql definition node from the given document
 * @param doc A graphql document node
 */
exports.getDefinitionNode = function (doc) {
    return doc.definitions[0];
};
/**
 * Maps over the definitions in a Graphql document object and returns
 * an array of documents with only a single definition
 * @param gqlDocument The parsed Graphql document to be split
 */
exports.splitDocument = function (gqlDocument) {
    return gqlDocument.definitions.map(function (def) { return (__assign({}, gqlDocument, { definitions: [def] })); });
};
exports.operations = [
    'query',
    'mutation',
    'subscription'
];
exports.isOperationType = function (type) { return function (definitionNode) {
    return definitionNode.kind === 'OperationDefinition' &&
        definitionNode.operation === type;
}; };
exports.isQuery = exports.isOperationType('query');
exports.isMutation = exports.isOperationType('mutation');
exports.isSubscription = exports.isOperationType('subscription');
exports.getOperationsOfType = function (type) { return function (gqlDocuments) { return gqlDocuments.filter(function (doc) { return exports.isOperationType(type)(exports.getDefinitionNode(doc)); }); }; };
exports.getQueries = exports.getOperationsOfType('query');
exports.getMutations = exports.getOperationsOfType('mutation');
exports.getSubscriptions = exports.getOperationsOfType('subscription');
exports.getOperationName = function (operation) {
    var nameNode = exports.getDefinitionNode(operation)
        .name;
    return nameNode ? nameNode.value : '';
};
exports.isOperation = function (node) {
    return exports.getDefinitionNode(node).kind === 'OperationDefinition';
};
exports.isAnonymousOperation = function (node) {
    return exports.isOperation(node) &&
        !exports.getDefinitionNode(node).name;
};
exports.isNamedOperation = function (node) {
    return exports.isOperation(node) &&
        !!exports.getDefinitionNode(node).name;
};
exports.hasAnonymousOperation = function (nodes) {
    return nodes.some(exports.isAnonymousOperation);
};
exports.hasNamedOperation = function (nodes) {
    return nodes.some(exports.isNamedOperation);
};
