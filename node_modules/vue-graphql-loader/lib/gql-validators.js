"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gql_ast_helpers_1 = require("./gql-ast-helpers");
exports.ERROR_NO_ANONYMOUS_OPERATIONS = 'Anonymous operations are not allowed';
exports.ERROR_ONLY_ONE_ANON_OPERATION_ALLOWED = 'Only one anonymous operation allowed per component';
exports.ERROR_NO_MIXED_NAME_CASE = 'Cannot have both a named and anonymous operation in a component';
exports.failWithError = function (err) {
    throw new Error(err);
};
exports.noAnonymousOperations = function (gqlNodes, loaderOptions) {
    return loaderOptions.noAnonymousOperations && gql_ast_helpers_1.hasAnonymousOperation(gqlNodes)
        ? Promise.reject({
            message: exports.ERROR_NO_ANONYMOUS_OPERATIONS,
            affected: gqlNodes.filter(gql_ast_helpers_1.isAnonymousOperation)
        })
        : Promise.resolve({});
};
exports.failOnMixedNamedCase = function (gqlNodes) {
    var mixedNamedOperations = gql_ast_helpers_1.operations
        .map(function (type) { return gql_ast_helpers_1.getOperationsOfType(type)(gqlNodes); })
        .filter(function (opArray) { return opArray.length > 1; })
        .filter(function (opArray) { return gql_ast_helpers_1.hasNamedOperation(opArray) && gql_ast_helpers_1.hasAnonymousOperation(opArray); });
    return mixedNamedOperations.length > 0
        ? Promise.reject({
            message: exports.ERROR_NO_MIXED_NAME_CASE,
            affected: mixedNamedOperations
        })
        : Promise.resolve({});
};
exports.failOnMultipleAnonymous = function (gqlNodes) {
    return new Promise(function (resolve, reject) {
        var multiAnonymousOperations = gql_ast_helpers_1.operations
            .map(function (type) { return gql_ast_helpers_1.getOperationsOfType(type)(gqlNodes); })
            .map(function (opArray) { return opArray.filter(gql_ast_helpers_1.isAnonymousOperation); })
            .filter(function (opArray) { return opArray.length >= 2; })
            .reduce(function (curr, acc) { return acc.concat(curr); }, []);
        multiAnonymousOperations.length === 0
            ? resolve({})
            : reject({
                message: exports.ERROR_ONLY_ONE_ANON_OPERATION_ALLOWED,
                affected: multiAnonymousOperations
            });
    });
};
exports.verifyDocuments = function (gqlNodes, loaderOptions) {
    return Promise.all([
        exports.noAnonymousOperations(gqlNodes, loaderOptions),
        exports.failOnMultipleAnonymous(gqlNodes),
        exports.failOnMixedNamedCase(gqlNodes)
    ]);
};
