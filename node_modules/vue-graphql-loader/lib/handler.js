"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var gql_ast_helpers_1 = require("./gql-ast-helpers");
var gql_validators_1 = require("./gql-validators");
exports.aggregateOperations = function (operations) {
    return operations
        .map(function (operation) {
        var _a;
        return (_a = {},
            _a[gql_ast_helpers_1.getOperationName(operation)] = operation,
            _a);
    })
        .reduce(function (acc, curr) { return (__assign({}, acc, curr)); });
};
exports.getOperations = function (type, operations) {
    if (operations === void 0) { operations = []; }
    return operations.length === 0
        ? undefined
        : gql_ast_helpers_1.hasAnonymousOperation(operations)
            ? operations.length === 1
                ? operations[0]
                : gql_validators_1.failWithError(gql_validators_1.ERROR_ONLY_ONE_ANON_OPERATION_ALLOWED)
            : exports.aggregateOperations(operations);
};
var defaultHandler = function handler(component, gqlDocuments, attributes) {
    if (attributes === void 0) { attributes = {}; }
    component.options.query = exports.getOperations('query', gql_ast_helpers_1.getQueries(gqlDocuments));
    component.options.mutation = exports.getOperations('mutation', gql_ast_helpers_1.getMutations(gqlDocuments));
    component.options.subscription = exports.getOperations('subscription', gql_ast_helpers_1.getSubscriptions(gqlDocuments));
    // @ts-ignore
    delete component.options._Ctor;
};
exports.default = defaultHandler;
