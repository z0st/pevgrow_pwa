"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var handler_1 = __importStar(require("./handler"));
var gql_test_utils_1 = require("./gql-test-utils");
var gql_validators_1 = require("./gql-validators");
describe('aggregteOperations()', function () {
    it('should combine multiple operations into a single object', function () {
        var queries = gql_test_utils_1.strToDocNodes("\n      query Query1 {\n        hello\n      }\n      query Query2 {\n        world\n      }\n    ");
        expect(handler_1.aggregateOperations(queries)).toEqual({
            Query1: queries[0],
            Query2: queries[1]
        });
    });
});
describe('getOperations()', function () {
    it('should return undefined if given no operations', function () {
        expect(handler_1.getOperations('query')).toBeUndefined();
        expect(handler_1.getOperations('query', [])).toBeUndefined();
    });
    it('should return an anonymous operation if only one is present', function () {
        var query = gql_test_utils_1.strToDocNodes("\n      {\n        hello\n      }\n    ");
        expect(handler_1.getOperations('query', query)).toEqual(query[0]);
    });
    it('should error if more than one anonymous operation is present', function () {
        var queries = gql_test_utils_1.strToDocNodes("\n      {\n        hello\n      }\n      {\n        world\n      }\n    ");
        expect(function () { return handler_1.getOperations('query', queries); }).toThrowError(gql_validators_1.ERROR_ONLY_ONE_ANON_OPERATION_ALLOWED);
    });
    it('should return aggregate option for multiple named operations', function () {
        var queries = gql_test_utils_1.strToDocNodes("\n      query Query1 {\n        hello\n      }\n      query Query2 {\n        world\n      }\n    ");
        expect(handler_1.getOperations('query', queries)).toEqual({
            Query1: queries[0],
            Query2: queries[1]
        });
    });
});
describe('default', function () {
    it('should set anonymous queries to $query', function () {
        var component = {
            options: {}
        };
        var query = gql_test_utils_1.strToDocNodes("\n      {\n        hello\n      }\n    ");
        handler_1.default(component, query);
        expect(component).toEqual({
            options: {
                query: query[0]
            }
        });
    });
    it('should set named queries to $query.[name]', function () {
        var component = {
            options: {}
        };
        var query = gql_test_utils_1.strToDocNodes("\n      query Greeting {\n        hello\n      }\n    ");
        handler_1.default(component, query);
        expect(component).toEqual({
            options: {
                query: {
                    Greeting: query[0]
                }
            }
        });
    });
});
