"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var loader_utils_1 = require("loader-utils");
var path_1 = require("path");
var validation_error_1 = __importDefault(require("./validation-error"));
var loader_options_1 = require("./loader-options");
var gql_validators_1 = require("./gql-validators");
var gql_ast_helpers_1 = require("./gql-ast-helpers");
exports.defaultHandlerPath = path_1.join(__dirname, 'handler');
function graphqlLoader(source) {
    var options = __assign({}, loader_options_1.defaultLoaderOptions, loader_utils_1.getOptions(this));
    var attrs = loader_utils_1.parseQuery(this.resourceQuery);
    var gqlDocument = graphql_tag_1.default(source);
    var documents = gql_ast_helpers_1.splitDocument(gqlDocument);
    var handler = (options && options.handler) || exports.defaultHandlerPath;
    var returnLoaderResults = this.async();
    gql_validators_1.verifyDocuments(documents, options)
        .then(function () {
        returnLoaderResults(null, "\n        let gqlDocs = " + JSON.stringify(documents) + ";\n        let attrs = " + JSON.stringify(__assign({}, options, attrs)) + " || {};\n        let handler = require(" + JSON.stringify(handler) + ");\n\n        if (handler.default) {\n          handler = handler.default;\n        }\n        module.exports = function vueGraphqlLoader(component) {\n          handler(component, gqlDocs, attrs);\n        }");
    })
        .catch(validation_error_1.default(this, returnLoaderResults));
}
exports.default = graphqlLoader;
